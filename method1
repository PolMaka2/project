from math import *
from tkinter import *
from TDwin import *

EPS = 1e-6
PI = 3.14
ox = 0
oy = 0
oz = 0
WIDTH = 700
HEIGHT = 600
top = [0] * WIDTH
down = [HEIGHT] * WIDTH


def par_el(x, z):
    return (x+z)/2


def par_gip(x):
    return 1/(x+EPS) + 1/(x+EPS)


def par_odn(x, z):
    return x*x + z*z


def par_dv(x, z):
    return x*z


step_x = StringVar() # позволяет создать привязку к строке
step_x.set(0)
step_x_entry = Entry(root, textvariable=step_x) #Entry представляет поле для ввода текста. textvariable: устанавливает привязку к элементу StringVar
step_x_entry.place(x=20, y=520)
step_x_text = Label(text="шаг по х:")
step_x_text.place(x=20, y=500)

step_z = StringVar()
step_z.set(0)
step_z_entry = Entry(root, textvariable=step_z)
step_z_entry.place(x=20, y=560)
step_z_text = Label(text="шаг по z:")
step_z_text.place(x=20, y=540)

lim_x_begin_entry = Entry(root)
lim_x_begin_entry.place(x=170, y=520)
lim_x_begin_text = Label(text="начало х:")
lim_x_begin_text.place(x=170, y=500)

lim_x_end_entry = Entry(root)
lim_x_end_entry.place(x=350, y=520)
lim_x_end_text = Label(text="конец x:")
lim_x_end_text.place(x=350, y=500)

lim_z_begin_entry = Entry(root)
lim_z_begin_entry.place(x=170, y=560)
lim_z_begin_text = Label(text="начало z:")
lim_z_begin_text.place(x=170, y=540)

lim_z_end_entry = Entry(root)
lim_z_end_entry.place(x=350, y=560)
lim_z_end_text = Label(text="конец z:")
lim_z_end_text.place(x=350, y=540)


def rotate_x(y, z, ox):
    ox = ox * PI / 180
    buf = y
    y = cos(ox) * y - sin(ox) * z
    z = cos(ox)*z + sin(ox)*buf
    return [y, z]


def rotate_y(x, z, oy):
    oy = oy * PI / 180
    buf = x
    x = cos(oy) * x - sin(oy) * z
    z = cos(oy)*z + sin(oy)*buf
    return [x, z]


def rotate_z(x, y, oz):
    oz = oz * PI / 180
    buf = x
    x = cos(oz) * x - sin(oz) * y
    y = cos(oz)*y + sin(oz)*buf
    return [x, y]


def trans(x, y, z, ox, oy, oz, x_pr, y_pr):
    k = 35
    x_c = WIDTH
    y_c = WIDTH
    x_tmp = x
    y_tmp = y
    z_tmp = z

    bf = rotate_x(y_tmp, z_tmp, ox)
    y_tmp = bf[0]
    z_tmp = bf[1]

    bf = rotate_y(x_tmp, z_tmp, oy)
    x_tmp = bf[0]

    bf = rotate_z(x_tmp, y_tmp, oz)
    x_tmp = bf[0]
    y_tmp = bf[1]
    res_x = round(x_tmp * k + x_c)
    res_y = round(y_tmp * k + y_c)
    return [x, y, z, res_x, res_y]


# поэтапно расуется каждая линия графика, слева направо
def horizont(x1, y1, x2, y2):
    global top
    global down

    # определяется видимость линии относительно пользователя
    if (x1 < 0) or (x1 > WIDTH-1):
        return
    if (x2 < 0) or (x2 > WIDTH-1):
        return

    if x2 < x1:
        tmp = x1
        x1 = x2
        x2 = tmp
        tmp = y1
        y1 = y2
        y2 = tmp

    if (x2 - x1) == 0:
        top[x2] = max(top[x2], y2)
        down[x2] = min(down[x2], y2)
        if (x2 >= 0) and (x2 <= WIDTH):
            canvas.create_line(x1, WIDTH-y1, x2, WIDTH-y2, fill='black')
    else:
        x_pr = x1
        y_pr = y1
        m = (y2 - y1) / (x2 - x1)  # наклон
        for x in range(x1, x2):
            y = round(m * (x - x1) + y1)
            top[x] = max(top[x], y)
            down[x] = min(down[x], y)
            if (x >= 0) and (x <= WIDTH):
                canvas.create_line(x_pr, WIDTH-y_pr, x, WIDTH-y, fill='black')


def edge_treat(x, y, z, ox, oy, oz, res_x, res_y):
    pass


def vis(x, y):
    pass

def intersect(x1, y1, x2, y2, ar, xi, yi): # ar - масив
    pass


def pnt():
    global ox
    global oy
    global oz
    global top
    global down

    step_x = float(step_x_entry.get()) # экран в горизонтальном направлении
    step_z = float(step_z_entry.get()) # экран в вертикальном направлении
    x_begin = float(lim_x_begin_entry.get()) # масив, содержащий ординату верхнего горазонта
    x_end  = float(lim_x_end_entry.get()) # масив, содержащий ординату нижнего горазонта
    z_begin  = float(lim_z_begin_entry.get()) # текущее значение функции
    z_end  = float(lim_z_end_entry.get()) # текущее значени точки
    pv = pov.get() # предидущее значение

    x_left = -1 # видима и ниже нижнего горизонта
    y_left  = -1 # видима и ниже нижнего горизонта
    x_right  = -1 # видима и ниже нижнего горизонта
    y_right  = -1 # видима и ниже нижнего горизонта
    x_pr = 0 # невидима
    y_pr = 0  # невидима

    z = z_end # z максимальное \ z минимальное
    while z >= z_begin:  # пока z макс больше текущего значения функции
        if pv == 0:  # если предидущее значение 0
            y_p = par_el(x_begin, z)  # то для 1 графика y_p = решение 1 уравнения
        elif pv == 1:
            y_p = par_gip(x_begin) # то для 2 графика ...
        elif pv == 2:
            y_p = par_odn(x_begin, z)
        elif pv == 3:
            y_p = par_dv(x_begin, z)

        bf = trans(x_begin, y_p, z, ox, oy, oz, x_pr, y_pr) # поворот по осям
        x_begin = bf[0]
        y_p = bf[1]
        z = bf[2]
        x_pr = bf[3]
        y_pr = bf[4]

        bf = edge_treat(x_pr, y_pr, x_left, y_left) # обработка бокового ребра сверху вниз
        x_pr = bf[0]
        y_pr = bf[1]
        x_left = bf[2]
        y_left = bf[3]

        Pflag = vis(x_pr, y_pr) # видимость

            #вычисление ф-ции для каждой точки на кривой, лежащей в плоскости
            x = x_begin  # минимальное \ максимальное
            while x <= x_end:
                x_c = 0
                y_c = 0
                xi = 0
                yi = 0
                if pv == 0:
                    y_p = par_el(x, z)
                elif pv == 1:
                    y_p = par_gip(x)
                elif pv == 2:
                    y_p = par_odn(x, z)
                elif pv == 3:
                    y_p = par_dv(x, z)

                bf = trans(x, y_p, z, ox, oy, oz, x_c, y_c)
                x = bf[0]
                y_p = bf[1]
                z = bf[2]
                x_c = bf[3]
                y_c = bf[4]

                Tflag = vis(x_c, y_c)  # видимость текущей точки

                # проверка видимости точки и заполнение массива горизонта
                if Tflag == Pflag:
                    if Pflag != 0:
                        horizont(x_pr, y_pr, x_c, y_c)

                elif Tflag == 0:
                    if Pflag == 1:
                        bf = intersect(x_pr, y_pr, x_c, y_c, top, xi, yi)
                        xi = bf[0]
                        yi = bf[1]

                    else:
                        bf = intersect(x_pr, y_pr, x_c, y_c, down, xi, yi)
                        xi = bf[0]
                        yi = bf[1]
                    horizont(x_pr, y_pr, xi, yi)

                elif Tflag == 1:
                    if Pflag == 0:
                        bf = intersect(x_pr, y_pr, x_c, y_c, top, xi, yi)
                        xi = bf[0]
                        yi = bf[1]
                        horizont(x_pr, y_pr, xi, yi)

                    else:

                        bf = intersect(x_pr, y_pr, x_c, y_c, top, xi, yi)
                        xi = bf[0]
                        yi = bf[1]
                        horizont(x_pr, y_pr, xi, yi)

                        bf = intersect(x_pr, y_pr, x_c, y_c, down, xi, yi)
                        xi = bf[0]
                        yi = bf[1]
                        horizont(xi, yi, x_pr, y_pr)
                else:
                    if Pflag == 0:
                        bf = intersect(x_pr, y_pr, x_c, y_c, down, xi, yi)
                        xi = bf[0]
                        yi = bf[1]
                        horizont(x_pr, y_pr, xi, yi)

                    else:

                        bf = intersect(x_pr, y_pr, x_c, y_c, top, xi, yi)
                        xi = bf[0]
                        yi = bf[1]
                        horizont(x_pr, y_pr, xi, yi)

                        bf = intersect(x_pr, y_pr, x_c, y_c, down, xi, yi)
                        xi = bf[0]
                        yi = bf[1]
                        horizont(xi, yi, x_pr, y_pr)

                Pflag = Tflag
                x_pr = x_c
                y_pr = y_c
                x += step_x

            bf = edge_treat(x_pr, y_pr, x_right, y_right)
            x_pr = bf[0]
            y_pr = bf[1]
            x_r = bf[2]
            y_r = bf[3]
            z -= step_z


def clean():
    global top
    global down
    top = [0] * WIDTH
    down = [HEIGHT] * WIDTH
    canvas.delete("all")  # удаляет все объекты на холсте


# поворот по оси ох
def o_x():
    clean()
    global ox
    ox += 2
    pnt()


# поворот по оси оy
def o_y():
    clean()
    global oy
    oy += 2
    pnt()


# поворот по оси оz
def o_z():
    clean()
    global oz
    oz += 2
    pnt()


b_pnt = Button(root, text='Рисуем', width=42, height=1)
b_pnt.place(x=0, y=480)
root.bind('<Button-1>', lambda event: o_x())
root.bind('<Button-3>', lambda event: o_y())
root.bind('<Button-2>', lambda event: o_z())


